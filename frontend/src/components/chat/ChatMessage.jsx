import styled from "styled-components";
import ReactMarkdown from "react-markdown";
import remarkGfm from 'remark-gfm';
import rehypeRaw from 'rehype-raw';
import imageSize from 'fs-imagesize';


const MessageContainer = styled.div`
  display: flex;
  justify-content: ${(props) => (props.isUser ? 'flex-end' : 'flex-start')};
  margin: 10px 0;
`;

const Avatar = styled.div`
  width: 35px;
  height: 35px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: ${(props) => (props.isUser ? '#1a237e' : '#e0e0e0')};
  color: ${(props) => (props.isUser ? '#ffffff' : '#000000')};
  font-size: 16px;
  order: ${(props) => (props.isUser ? '1' : '0')};
`;


const MessageBubble = styled.div`
  max-width: 49%;
  padding: 10px;
  border-radius: ${(props) =>
        props.isUser ? '20px 20px 0 20px' : '20px 20px 20px 0'};
  background-color: ${(props) => (props.isUser ? '#1a237e' : '#ffffff')};
  color: ${(props) => (props.isUser ? '#ffffff' : '#000000')};
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
  font-size: 16px;
  line-height: 1.5;

  p {
    margin: 0;
  }

  code {
    background-color: ${(props) => (props.isUser ? '#283593' : '#f5f5f5')};
    padding: 2px 6px;
    border-radius: 4px;
    font-family: 'Courier New', Courier, monospace;
    font-size: 14px;
  }

  pre {
    background-color: ${(props) => (props.isUser ? '#283593' : '#f5f5f5')};
    padding: 12px;
    border-radius: 8px;
    overflow-x: auto;
    margin: 8px 0;

    code {
      background-color: transparent;
      padding: 0;
    }
  }

  ul,
  ol {
    margin: 8px 0;
    padding-left: 20px;
  }

  table {
    width: 100%;
    background: ${props => props.isUser ? 'rgba(255,255,255,0.1)' : '#f8f9fa'};
    border-radius: 8px;
    overflow: hidden;
    font-size: 15px;
    // font-family: 'Courier New', monospace;
    table-layout: fixed; /* ƒê·∫£m b·∫£o c·ªôt c√≥ chi·ªÅu r·ªông c·ªë ƒë·ªãnh */
    word-wrap: break-word; /* Cho ph√©p ng·∫Øt t·ª´ khi c·∫ßn thi·∫øt */
  }

  th, td {
    padding: 8px;
    text-align: left;
    line-height: 1.5;
    white-space: pre-wrap; /* Gi·ªØ nguy√™n kho·∫£ng tr·∫Øng v√† cho ph√©p ng·∫Øt d√≤ng */
    word-break: break-word; /* Ng·∫Øt t·ª´ ƒë·ªÉ tr√°nh tr√†n n·ªôi dung */
    border-right: 1px solid ${p => p.isUser ? 'rgba(255,255,255,0.2)' : '#dee2e6'};
    border-bottom: 1px solid ${p => p.isUser ? 'rgba(255,255,255,0.2)' : '#dee2e6'};
  }

  th {
    background: ${props => props.isUser ? 'rgba(255,255,255,0.15)' : '#e9ecef'};
    font-weight: 600;
  }
`;

// Custom renderer for images (responsive, rounded corners)
const markdownComponents = {
    img: ({ node, ...props }) => (
        <img
            {...props}
            style={{ display: 'block', maxWidth: '25%', borderRadius: '8px', margin: '8px 0' }}
            alt={props.alt}
        />
    )
};

const ChatMessage = ({ message, isUser }) => {
    // N·∫øu message l√† object { text: string }, l·∫•y .text; n·∫øu ƒë√£ string, gi·ªØ nguy√™n

    // const testMd = `
    // ![Test Image](https://drive.google.com/uc?export=download&id=16IMfVJz6lOQ5coLW-bgbYHTYAz2wOfem)
    //   `;

    const messageText =
        typeof message === 'string'
            ? message
            : typeof message.text === 'string'
                ? message.text
                : JSON.stringify(message);

    // // 3. Ch·ªçn ngu·ªìn Markdown ƒë·ªÉ render
    // const toRender = process.env.NODE_ENV === 'development'
    // ? testMd       // khi dev th√¨ d√πng testMd
    // : messageText; // production th√¨ d√πng messageText

    return (
        <MessageContainer isUser={isUser}>
            <Avatar isUser={isUser}>
                {isUser ? 'üë§' : 'ü§ñ'}
            </Avatar>
            <MessageBubble isUser={isUser}>
                <ReactMarkdown remarkPlugins={[remarkGfm, [imageSize]]} rehypePlugins={[rehypeRaw]} components={markdownComponents}>
                    {messageText}


                    {/* {
            `
            ### B·∫£ng So S√°nh iOS v√† Android

| Ti√™u ch√≠                  | iOS (Apple)                                               | Android (Samsung, Xiaomi, Oppo, v.v.)             |
|---------------------------|-----------------------------------------------------------|---------------------------------------------------|
| **Thi·∫øt b·ªã**              | Ch·ªâ iPhone, iPad, Apple s·∫£n xu·∫•t                         | R·∫•t nhi·ªÅu h√£ng, nhi·ªÅu m·∫´u m√£, gi√° ƒëa d·∫°ng         |
| **C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm**     | Nhanh, ƒë·ªìng lo·∫°t, h·ªó tr·ª£ 5-6 nƒÉm                         | Ch·∫≠m h∆°n, t√πy t·ª´ng h√£ng, th∆∞·ªùng 2-4 nƒÉm           |
| **B·∫£o m·∫≠t & ri√™ng t∆∞**    | Cao, ki·ªÉm so√°t ch·∫∑t, √≠t malware                          | Kh√° t·ªët nh∆∞ng k√©m iOS, nguy c∆° malware nhi·ªÅu h∆°n  |
| **T√πy bi·∫øn giao di·ªán**    | H·∫°n ch·∫ø, giao di·ªán ƒë·ªìng b·ªô, √≠t t√πy ch·ªânh                 | R·∫•t linh ho·∫°t, t√πy bi·∫øn m·∫°nh                      |
| **Kho ·ª©ng d·ª•ng**          | App Store, ki·ªÉm duy·ªát nghi√™m, ch·∫•t l∆∞·ª£ng cao             | Google Play, nhi·ªÅu app mi·ªÖn ph√≠, ki·ªÉm duy·ªát l·ªèng  |
| **ƒêa d·∫°ng s·∫£n ph·∫©m**      | √çt m·∫´u, t·∫≠p trung cao c·∫•p                                | R·∫•t nhi·ªÅu m·∫´u, t·ª´ gi√° r·∫ª ƒë·∫øn cao c·∫•p              |
| **T√≠ch h·ª£p h·ªá sinh th√°i** | Tuy·ªát v·ªùi v·ªõi Mac, iPad, Apple Watch, AirPods...         | T√πy t·ª´ng h√£ng, Google d·ªãch v·ª• ph·ªï bi·∫øn            |
| **Gi√° b√°n**               | Cao, √≠t gi·∫£m gi√°                                         | ƒê·ªß m·ªçi ph√¢n kh√∫c, d·ªÖ ti·∫øp c·∫≠n ng∆∞·ªùi d√πng ph·ªï th√¥ng|
| **H·ªó tr·ª£ sau b√°n**        | Ch√≠nh h√£ng t·ªët, d·ªÖ n√¢ng c·∫•p                              | T√πy h√£ng, t√πy ƒë·ªãa ph∆∞∆°ng                          |

---
`
          } */}
                </ReactMarkdown>
            </MessageBubble>
        </MessageContainer>
    );
};

/**
 * Component hi·ªÉn th·ªã m·ªôt tin nh·∫Øn trong cu·ªôc tr√≤ chuy·ªán
 * H·ªó tr·ª£:
 * - Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng v√† bot v·ªõi style kh√°c nhau
 * - Render markdown content
 * - Style cho code blocks, tables, lists
 * 
 * @param {Object} props - Props c·ªßa component
 * @param {Object} props.message - Th√¥ng tin tin nh·∫Øn
 * @param {string} props.message.text - N·ªôi dung tin nh·∫Øn
 * @param {boolean} props.isUser - ƒê√°nh d·∫•u tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng hay bot
 */

// const ChatMessage = ({ message, isUser }) => {
//     // Chuy·ªÉn ƒë·ªïi tin nh·∫Øn sang string n·∫øu ch∆∞a ph·∫£i

//     const messageText = typeof message === 'string' ? message : JSON.stringify(message.text);

//     return (
//         <MessageContainer isUser={isUser}>
//             <MessageBubble isUser={isUser}>
//                 <ReactMarkdown>{messageText}</ReactMarkdown>
//             </MessageBubble>
//         </MessageContainer>
//     );
// };

export default ChatMessage;